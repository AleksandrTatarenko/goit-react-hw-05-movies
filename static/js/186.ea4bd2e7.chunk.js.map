{"version":3,"file":"static/js/186.ea4bd2e7.chunk.js","mappings":"yNAiCA,UA7BgB,WACZ,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAASC,EAAAA,EAAAA,MAef,OAbAC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,WAA4BC,GAA5B,gGAE8BC,EAAAA,EAAAA,kBAAsBD,GAFpD,OAEcL,EAFd,OAGQC,EAAWD,EAAQO,SAH3B,gDAKQC,QAAQC,IAAR,MALR,8GADY,uBAAC,SAAD,2BAUZC,CAAaR,EAAOS,QACvB,GAAE,CAACT,EAAOS,WAEH,yBACHX,EAAQY,OAAS,GAAI,wBACjBZ,EAAQa,KAAI,YAA8B,IAA3BR,EAA0B,EAA1BA,GAAIS,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACxB,OAAQ,2BACJ,oCAAYD,MACZ,uBAAIC,MAFSV,EAIpB,OACG,sEAEf,C,6DC9BDW,EAAAA,GAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEVC,EAAkB,mCAAG,sGACAF,EAAAA,GAAAA,IAAA,mCAAsCC,IADtC,cACjBE,EADiB,OAEjBC,EAASD,EAASE,KAFD,kBAGhBD,GAHgB,2CAAH,qDAMlBE,EAAkB,mCAAG,WAAOjB,GAAP,yFACAW,EAAAA,GAAAA,IAAA,gBAAmBX,EAAnB,oBAAiCY,EAAjC,oBADA,cACjBE,EADiB,OAEjBI,EAAQJ,EAASE,KAFA,kBAGhBE,GAHgB,2CAAH,sDAMlBC,EAAiB,mCAAG,WAAOnB,GAAP,yFACCW,EAAAA,GAAAA,IAAA,gBAAmBX,EAAnB,4BAAyCY,EAAzC,oBADD,cAChBE,EADgB,OAEhBM,EAAUN,EAASE,KAFH,kBAGfI,GAHe,2CAAH,sDAMjBC,EAAiB,mCAAG,WAAOrB,GAAP,yFACCW,EAAAA,GAAAA,IAAA,gBAAmBX,EAAnB,4BAAyCY,EAAzC,2BADD,cAChBE,EADgB,OAEhBnB,EAAUmB,EAASE,KAFH,kBAGfrB,GAHe,2CAAH,sDAMjB2B,EAAW,mCAAG,WAAOC,GAAP,yFACOZ,EAAAA,GAAAA,IAAA,+BAAkCC,EAAlC,iCAAkEW,EAAlE,gCADP,cACVT,EADU,OAEVC,EAASD,EAASE,KAFR,kBAGTD,GAHS,2CAAH,sDAOXd,EAAM,CACRY,mBAAAA,EACAI,mBAAAA,EACAE,kBAAAA,EACAE,kBAAAA,EACAC,YAAAA,GAGJ,K","sources":["components/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport api from 'services/api';\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const params = useParams();\n\n    useEffect(() => {\n        async function fetchReviews(id) {\n            try {\n                const reviews = await api.fetchMovieReviews(id);\n                setReviews(reviews.results);\n            } catch (error) {\n                console.log(error);\n            } finally {\n            };\n        };\n        fetchReviews(params.movieId);\n    }, [params.movieId]);\n\n    return (<div>\n        {reviews.length > 0 ? <ul>\n            {reviews.map(({ id, author, content }) => {\n                return (<li key={id}>\n                    <h3>Autor: {author}</h3>\n                    <p>{content}</p>\n                </li>)\n            })}\n        </ul> : <p>We don't have any reviews for this movie.</p>}\n    </div>);\n};\n\nexport default Reviews;\n","import axios from 'axios';\naxios.defaults.baseURL = \"https://api.themoviedb.org/3/\";\nconst API_KEY = \"b3f9afca16a4955ec4fa9a455f1a40de\";\n\nconst fetchMoviesInTrend = async () => {\n    const response = await axios.get(`trending/all/day?api_key=${API_KEY}`);\n    const movies = response.data;\n    return movies;\n};\n\nconst fetchMoviesDetails = async (id) => {\n    const response = await axios.get(`movie/${id}?api_key=${API_KEY}&language=en-US`);\n    const movie = response.data;\n    return movie;\n};\n\nconst fetchMovieCredits = async (id) => {\n    const response = await axios.get(`movie/${id}/credits?api_key=${API_KEY}&language=en-US`);\n    const credits = response.data;\n    return credits;\n};\n\nconst fetchMovieReviews = async (id) => {\n    const response = await axios.get(`movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n    const reviews = response.data;\n    return reviews;\n};\n\nconst fetchMovies = async (searchQuery) => {\n    const response = await axios.get(`search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`);\n    const movies = response.data;\n    return movies;\n};\n\n\nconst api = {\n    fetchMoviesInTrend,\n    fetchMoviesDetails,\n    fetchMovieCredits,\n    fetchMovieReviews,\n    fetchMovies\n};\n\nexport default api;\n "],"names":["useState","reviews","setReviews","params","useParams","useEffect","id","api","results","console","log","fetchReviews","movieId","length","map","author","content","axios","API_KEY","fetchMoviesInTrend","response","movies","data","fetchMoviesDetails","movie","fetchMovieCredits","credits","fetchMovieReviews","fetchMovies","searchQuery"],"sourceRoot":""}